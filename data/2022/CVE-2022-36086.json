{
	"id": "CVE-2022-36086",
	"vulnerabilities": [
		{
			"content": {
				"id": "CVE-2022-36086",
				"title": "linked_list_allocator vulnerable to out-of-bound writes on `Heap` initialization and `Heap::extend`",
				"description": "linked_list_allocator is an allocator usable for no_std systems. Prior to version 0.10.2, the heap initialization methods were missing a minimum size check for the given heap size argument. This could lead to out-of-bound writes when a heap was initialized with a size smaller than `3 * size_of::<usize>` because of metadata write operations. This vulnerability impacts all the initialization functions on the `Heap` and `LockedHeap` types, including `Heap::new`, `Heap::init`, `Heap::init_from_slice`, and `LockedHeap::new`. It also affects multiple uses of the `Heap::extend` method. Version 0.10.2 contains a patch for the issue. As a workaround, ensure that the heap is only initialized with a size larger than `3 * size_of::<usize>` and that the `Heap::extend` method is only called with sizes larger than `2 * size_of::<usize>()`. Also, ensure that the total heap size is (and stays) a multiple of `2 * size_of::<usize>()`.",
				"severity": [
					{
						"type": "cvss_v31",
						"source": "GitHub_M",
						"cvss_v31": {
							"vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
							"base_score": 8.4,
							"base_severity": "HIGH",
							"temporal_score": 8.4,
							"temporal_severity": "HIGH",
							"environmental_score": 8.4,
							"environmental_severity": "HIGH"
						}
					}
				],
				"cwe": [
					{
						"source": "GitHub_M",
						"cwe": [
							"CWE-119",
							"CWE-787"
						]
					}
				],
				"references": [
					{
						"source": "GitHub_M",
						"url": "https://github.com/rust-osdev/linked-list-allocator/commit/013b0758643943e8df5b17bbb495460ff47e8bbf"
					},
					{
						"source": "GitHub_M",
						"url": "https://github.com/rust-osdev/linked-list-allocator/security/advisories/GHSA-xg8p-34w2-j49j"
					}
				]
			}
		}
	],
	"data_source": "mitre-v5"
}
