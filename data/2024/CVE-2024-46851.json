{
	"id": "CVE-2024-46851",
	"vulnerabilities": [
		{
			"content": {
				"id": "CVE-2024-46851",
				"title": "drm/amd/display: Avoid race between dcn10_set_drr() and dc_state_destruct()",
				"description": "In the Linux kernel, the following vulnerability has been resolved:\n\ndrm/amd/display: Avoid race between dcn10_set_drr() and dc_state_destruct()\n\ndc_state_destruct() nulls the resource context of the DC state. The pipe\ncontext passed to dcn10_set_drr() is a member of this resource context.\n\nIf dc_state_destruct() is called parallel to the IRQ processing (which\ncalls dcn10_set_drr() at some point), we can end up using already nulled\nfunction callback fields of struct stream_resource.\n\nThe logic in dcn10_set_drr() already tries to avoid this, by checking tg\nagainst NULL. But if the nulling happens exactly after the NULL check and\nbefore the next access, then we get a race.\n\nAvoid this by copying tg first to a local variable, and then use this\nvariable for all the operations. This should work, as long as nobody\nfrees the resource pool where the timing generators live.\n\n(cherry picked from commit a3cc326a43bdc48fbdf53443e1027a03e309b643)",
				"references": [
					{
						"source": "Linux",
						"url": "https://git.kernel.org/stable/c/a7aeb03888b92304e2fc7d4d1c242f54a312561b"
					},
					{
						"source": "Linux",
						"url": "https://git.kernel.org/stable/c/b6ce047a81f508f5c60756db8dfb5ff486e4dad0"
					}
				],
				"published": "2024-09-27T12:42:44.619Z",
				"modified": "2024-09-29T13:58:34.804Z"
			}
		}
	],
	"data_source": {
		"id": "mitre-v5",
		"raws": [
			"vuls-data-raw-mitre-v5/2024/CVE-2024-46851.json"
		]
	}
}
