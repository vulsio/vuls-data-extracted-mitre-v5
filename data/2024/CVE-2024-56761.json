{
	"id": "CVE-2024-56761",
	"vulnerabilities": [
		{
			"content": {
				"id": "CVE-2024-56761",
				"title": "x86/fred: Clear WFE in missing-ENDBRANCH #CPs",
				"description": "In the Linux kernel, the following vulnerability has been resolved:\n\nx86/fred: Clear WFE in missing-ENDBRANCH #CPs\n\nAn indirect branch instruction sets the CPU indirect branch tracker\n(IBT) into WAIT_FOR_ENDBRANCH (WFE) state and WFE stays asserted\nacross the instruction boundary.  When the decoder finds an\ninappropriate instruction while WFE is set ENDBR, the CPU raises a #CP\nfault.\n\nFor the \"kernel IBT no ENDBR\" selftest where #CPs are deliberately\ntriggered, the WFE state of the interrupted context needs to be\ncleared to let execution continue.  Otherwise when the CPU resumes\nfrom the instruction that just caused the previous #CP, another\nmissing-ENDBRANCH #CP is raised and the CPU enters a dead loop.\n\nThis is not a problem with IDT because it doesn't preserve WFE and\nIRET doesn't set WFE.  But FRED provides space on the entry stack\n(in an expanded CS area) to save and restore the WFE state, thus the\nWFE state is no longer clobbered, so software must clear it.\n\nClear WFE to avoid dead looping in ibt_clear_fred_wfe() and the\n!ibt_fatal code path when execution is allowed to continue.\n\nClobbering WFE in any other circumstance is a security-relevant bug.\n\n[ dhansen: changelog rewording ]",
				"references": [
					{
						"source": "Linux",
						"url": "https://git.kernel.org/stable/c/b939f108e86b76119428a6fa4e92491e09ac7867"
					},
					{
						"source": "Linux",
						"url": "https://git.kernel.org/stable/c/dc81e556f2a017d681251ace21bf06c126d5a192"
					}
				],
				"published": "2025-01-06T16:20:41.112Z",
				"modified": "2025-01-06T16:20:41.112Z"
			}
		}
	],
	"data_source": {
		"id": "mitre-v5",
		"raws": [
			"vuls-data-raw-mitre-v5/2024/CVE-2024-56761.json"
		]
	}
}
